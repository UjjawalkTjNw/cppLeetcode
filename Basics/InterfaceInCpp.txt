Interface in c++ is a mechanism that allows abstraction
It is achieved by abstract class
Explain abstract class then
sample code for abstraction:
#include <iostream>
using namespace std;

// Interface (Abstract Class)
class Shape {
public:
    // Pure Virtual Function (Acts as an interface)
    virtual void draw() = 0;

    // Virtual Destructor (Good Practice)
    virtual ~Shape() {}
};

// Derived Class 1: Implements Shape Interface
class Circle : public Shape {
public:
    void draw() override {
        cout << "Drawing a Circle" << endl;
    }
};

// Derived Class 2: Implements Shape Interface
class Rectangle : public Shape {
public:
    void draw() override {
        cout << "Drawing a Rectangle" << endl;
    }
};

int main() {
    // Interface Reference (Polymorphism)
    Shape* shape1 = new Circle();
    Shape* shape2 = new Rectangle();

    shape1->draw();  // Calls Circle's draw()
    shape2->draw();  // Calls Rectangle's draw()

    delete shape1;
    delete shape2;

    return 0;
}
















Where Should We Define an Interface in C++? (.h or .cpp?)
When creating an interface (abstract class) in C++, we declare it in a header file (.h) and, if needed,  
 [ implement any non-pure virtual functions in a source file (.cpp).: donot explain this point]

Why Should We Declare an Interface in .h?
✅ Encapsulation & Modularity → The interface can be reused across multiple .cpp files.
✅ Code Separation → Keeping the declaration in .h and implementation in .cpp improves clarity.
✅ Reduces Compilation Time → Only the header file is included where needed.

